





/*
 * Understanding Rvalue and Lvalue
 *
 *
 * Why do I care?
 * 1. Understand C++ construct, and decypher compiler errors or warnings.
 * 2. C++ 11 introduced rvalue reference.
 *
 *
 */







/*
 * Simplified Definition:
 *
 * lvalue - An object that occupies some identifiable location in memory
 * rvalue - Any object that is not a lvalue
 */













//Lvalue Examples:
int i;        // i is a lvalue
int* p = &i;  // i's address is identifiable
i = 2;    // Memory content is modified

class dog;
dog d1;   // lvalue of user defined type (class)

         // Most variables in C++ code are lvalues
//Rvalue Examples:
int x = 2,i;        // 2 is an rvalue
int x = i+2;      // (i+2) is an rvalue
int* p = &(i+2);  // Error
i+2 = 4;     // Error
2 = i;       // Error

dog d1;
d1 = dog();  // dog() is rvalue of user defined type (class)

int sum(int x, int y) { return x+y; }
int i = sum(3, 4);  // sum(3, 4) is rvalue

//Rvalues: 2, i+2, dog(), sum(3,4), x+y
//Lvalues: x, i, d1, p











//Reference (or lvalue reference):
int i;
int& r = i;

int& r = 5;      // Error


const int& r = 5;   //





int square(int& x) { return x*x; }
int main(){
    int i=5;
   cout<<square(5);
        return 0;
}


int square(const int& x) { return x*x; }  // square(40) and square(i) work



/*
 * Summary
 *
 * 1. Every C++ expression yield either an rvalue or a lvalue.
 * 2. If the expression has an identifiable memory address, it's lvalue;
 *    otherwise, rvalue.
 */






















/*##################################################################
 * Rvalue Reference  (C++ 11)
 *
 * Prerequisite: Understanding rvalue and lvalue
 */

/*
 * What is rvalue reference?
 */

int a = 5;
int& b = a;   // b is a lvalue reference, originally called reference in C++ 03

int&& c       // c is an rvalue reference





void printInt(int& i) { cout << "lvalue reference: " << i << endl; }
void printInt(int&& i) { cout << "rvalue reference: " << i << endl; }

int main() {
   int i = 1;
   printInt(i);   // Call the first printInt
   printInt(6);   // Call the second printInt



}
